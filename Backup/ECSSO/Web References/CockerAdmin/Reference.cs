//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.1
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.1。
// 
#pragma warning disable 1591

namespace ECSSO.CockerAdmin {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CockerAdminSoap", Namespace="http://admin.cocker.com.tw/")]
    public partial class CockerAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAuthenticatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpirationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForgetPwdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CockerAdmin() {
            this.Url = global::ECSSO.Properties.Settings.Default.ECSSO_CockerAdmin_CockerAdmin;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertIDCompletedEventHandler InsertIDCompleted;
        
        /// <remarks/>
        public event UpdateEndDateCompletedEventHandler UpdateEndDateCompleted;
        
        /// <remarks/>
        public event UpdatePwdCompletedEventHandler UpdatePwdCompleted;
        
        /// <remarks/>
        public event IsAuthenticatedCompletedEventHandler IsAuthenticatedCompleted;
        
        /// <remarks/>
        public event GetNewsCompletedEventHandler GetNewsCompleted;
        
        /// <remarks/>
        public event GetExpirationCompletedEventHandler GetExpirationCompleted;
        
        /// <remarks/>
        public event ForgetPwdCompletedEventHandler ForgetPwdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/InsertID", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertID(string OrgName, string ID, string EndDate, string Email) {
            object[] results = this.Invoke("InsertID", new object[] {
                        OrgName,
                        ID,
                        EndDate,
                        Email});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertIDAsync(string OrgName, string ID, string EndDate, string Email) {
            this.InsertIDAsync(OrgName, ID, EndDate, Email, null);
        }
        
        /// <remarks/>
        public void InsertIDAsync(string OrgName, string ID, string EndDate, string Email, object userState) {
            if ((this.InsertIDOperationCompleted == null)) {
                this.InsertIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertIDOperationCompleted);
            }
            this.InvokeAsync("InsertID", new object[] {
                        OrgName,
                        ID,
                        EndDate,
                        Email}, this.InsertIDOperationCompleted, userState);
        }
        
        private void OnInsertIDOperationCompleted(object arg) {
            if ((this.InsertIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertIDCompleted(this, new InsertIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/UpdateEndDate", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEndDate(string OrgName, string ID, string EndDate) {
            object[] results = this.Invoke("UpdateEndDate", new object[] {
                        OrgName,
                        ID,
                        EndDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEndDateAsync(string OrgName, string ID, string EndDate) {
            this.UpdateEndDateAsync(OrgName, ID, EndDate, null);
        }
        
        /// <remarks/>
        public void UpdateEndDateAsync(string OrgName, string ID, string EndDate, object userState) {
            if ((this.UpdateEndDateOperationCompleted == null)) {
                this.UpdateEndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEndDateOperationCompleted);
            }
            this.InvokeAsync("UpdateEndDate", new object[] {
                        OrgName,
                        ID,
                        EndDate}, this.UpdateEndDateOperationCompleted, userState);
        }
        
        private void OnUpdateEndDateOperationCompleted(object arg) {
            if ((this.UpdateEndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEndDateCompleted(this, new UpdateEndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/UpdatePwd", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePwd(string OrgName, string ID, string Pwd) {
            object[] results = this.Invoke("UpdatePwd", new object[] {
                        OrgName,
                        ID,
                        Pwd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePwdAsync(string OrgName, string ID, string Pwd) {
            this.UpdatePwdAsync(OrgName, ID, Pwd, null);
        }
        
        /// <remarks/>
        public void UpdatePwdAsync(string OrgName, string ID, string Pwd, object userState) {
            if ((this.UpdatePwdOperationCompleted == null)) {
                this.UpdatePwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePwdOperationCompleted);
            }
            this.InvokeAsync("UpdatePwd", new object[] {
                        OrgName,
                        ID,
                        Pwd}, this.UpdatePwdOperationCompleted, userState);
        }
        
        private void OnUpdatePwdOperationCompleted(object arg) {
            if ((this.UpdatePwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePwdCompleted(this, new UpdatePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/IsAuthenticated", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAuthenticated(string OrgName, string ID, string Pwd) {
            object[] results = this.Invoke("IsAuthenticated", new object[] {
                        OrgName,
                        ID,
                        Pwd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string OrgName, string ID, string Pwd) {
            this.IsAuthenticatedAsync(OrgName, ID, Pwd, null);
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string OrgName, string ID, string Pwd, object userState) {
            if ((this.IsAuthenticatedOperationCompleted == null)) {
                this.IsAuthenticatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAuthenticatedOperationCompleted);
            }
            this.InvokeAsync("IsAuthenticated", new object[] {
                        OrgName,
                        ID,
                        Pwd}, this.IsAuthenticatedOperationCompleted, userState);
        }
        
        private void OnIsAuthenticatedOperationCompleted(object arg) {
            if ((this.IsAuthenticatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAuthenticatedCompleted(this, new IsAuthenticatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/GetNews", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNews(string ID) {
            object[] results = this.Invoke("GetNews", new object[] {
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewsAsync(string ID) {
            this.GetNewsAsync(ID, null);
        }
        
        /// <remarks/>
        public void GetNewsAsync(string ID, object userState) {
            if ((this.GetNewsOperationCompleted == null)) {
                this.GetNewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewsOperationCompleted);
            }
            this.InvokeAsync("GetNews", new object[] {
                        ID}, this.GetNewsOperationCompleted, userState);
        }
        
        private void OnGetNewsOperationCompleted(object arg) {
            if ((this.GetNewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewsCompleted(this, new GetNewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/GetExpiration", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExpiration(string OrgName) {
            object[] results = this.Invoke("GetExpiration", new object[] {
                        OrgName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExpirationAsync(string OrgName) {
            this.GetExpirationAsync(OrgName, null);
        }
        
        /// <remarks/>
        public void GetExpirationAsync(string OrgName, object userState) {
            if ((this.GetExpirationOperationCompleted == null)) {
                this.GetExpirationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpirationOperationCompleted);
            }
            this.InvokeAsync("GetExpiration", new object[] {
                        OrgName}, this.GetExpirationOperationCompleted, userState);
        }
        
        private void OnGetExpirationOperationCompleted(object arg) {
            if ((this.GetExpirationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpirationCompleted(this, new GetExpirationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://admin.cocker.com.tw/ForgetPwd", RequestNamespace="http://admin.cocker.com.tw/", ResponseNamespace="http://admin.cocker.com.tw/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ForgetPwd(string OrgName, string ID) {
            object[] results = this.Invoke("ForgetPwd", new object[] {
                        OrgName,
                        ID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ForgetPwdAsync(string OrgName, string ID) {
            this.ForgetPwdAsync(OrgName, ID, null);
        }
        
        /// <remarks/>
        public void ForgetPwdAsync(string OrgName, string ID, object userState) {
            if ((this.ForgetPwdOperationCompleted == null)) {
                this.ForgetPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForgetPwdOperationCompleted);
            }
            this.InvokeAsync("ForgetPwd", new object[] {
                        OrgName,
                        ID}, this.ForgetPwdOperationCompleted, userState);
        }
        
        private void OnForgetPwdOperationCompleted(object arg) {
            if ((this.ForgetPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForgetPwdCompleted(this, new ForgetPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertIDCompletedEventHandler(object sender, InsertIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateEndDateCompletedEventHandler(object sender, UpdateEndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePwdCompletedEventHandler(object sender, UpdatePwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsAuthenticatedCompletedEventHandler(object sender, IsAuthenticatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAuthenticatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAuthenticatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNewsCompletedEventHandler(object sender, GetNewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExpirationCompletedEventHandler(object sender, GetExpirationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpirationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpirationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ForgetPwdCompletedEventHandler(object sender, ForgetPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForgetPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForgetPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591