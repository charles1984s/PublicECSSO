//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.42000。
// 
#pragma warning disable 1591

namespace ECSSO.CRMLoginWebService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsAuthenticatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAuthorizedSvcOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ECSSO.Properties.Settings.Default.ECSSO_CRMLoginWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsAuthenticatedCompletedEventHandler IsAuthenticatedCompleted;
        
        /// <remarks/>
        public event CheckAuthorizedSvcCompletedEventHandler CheckAuthorizedSvcCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/IsAuthenticated", RequestNamespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/", ResponseNamespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAuthenticated(string userPrincipalName, string password) {
            object[] results = this.Invoke("IsAuthenticated", new object[] {
                        userPrincipalName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string userPrincipalName, string password) {
            this.IsAuthenticatedAsync(userPrincipalName, password, null);
        }
        
        /// <remarks/>
        public void IsAuthenticatedAsync(string userPrincipalName, string password, object userState) {
            if ((this.IsAuthenticatedOperationCompleted == null)) {
                this.IsAuthenticatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAuthenticatedOperationCompleted);
            }
            this.InvokeAsync("IsAuthenticated", new object[] {
                        userPrincipalName,
                        password}, this.IsAuthenticatedOperationCompleted, userState);
        }
        
        private void OnIsAuthenticatedOperationCompleted(object arg) {
            if ((this.IsAuthenticatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAuthenticatedCompleted(this, new IsAuthenticatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/CheckAuthorizedSvc", RequestNamespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/", ResponseNamespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AUTH_SVC_RT CheckAuthorizedSvc(string Token, string OrgDomain, string ServiceId) {
            object[] results = this.Invoke("CheckAuthorizedSvc", new object[] {
                        Token,
                        OrgDomain,
                        ServiceId});
            return ((AUTH_SVC_RT)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAuthorizedSvcAsync(string Token, string OrgDomain, string ServiceId) {
            this.CheckAuthorizedSvcAsync(Token, OrgDomain, ServiceId, null);
        }
        
        /// <remarks/>
        public void CheckAuthorizedSvcAsync(string Token, string OrgDomain, string ServiceId, object userState) {
            if ((this.CheckAuthorizedSvcOperationCompleted == null)) {
                this.CheckAuthorizedSvcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAuthorizedSvcOperationCompleted);
            }
            this.InvokeAsync("CheckAuthorizedSvc", new object[] {
                        Token,
                        OrgDomain,
                        ServiceId}, this.CheckAuthorizedSvcOperationCompleted, userState);
        }
        
        private void OnCheckAuthorizedSvcOperationCompleted(object arg) {
            if ((this.CheckAuthorizedSvcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAuthorizedSvcCompleted(this, new CheckAuthorizedSvcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4161.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://cmw.hisales.hinet.net/ISVAccountAuthenticationService/")]
    public enum AUTH_SVC_RT {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        FAIL_SVC_NOTEXIST,
        
        /// <remarks/>
        FAIL_ORG_NOTEXIST,
        
        /// <remarks/>
        FAIL_TOKEN_ERROR,
        
        /// <remarks/>
        FAIL_OTHER,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void IsAuthenticatedCompletedEventHandler(object sender, IsAuthenticatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAuthenticatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAuthenticatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    public delegate void CheckAuthorizedSvcCompletedEventHandler(object sender, CheckAuthorizedSvcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4161.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAuthorizedSvcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAuthorizedSvcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AUTH_SVC_RT Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AUTH_SVC_RT)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591